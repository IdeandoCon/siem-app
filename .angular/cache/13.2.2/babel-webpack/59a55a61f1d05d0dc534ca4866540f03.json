{"ast":null,"code":"import { CookieService } from \"ngx-cookie-service\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { retry, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http, cookies) {\n      this.http = http;\n      this.cookies = cookies;\n      this.base_path = 'https://vigorous-chandrasekhar-2ee519.netlify.app';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n    login(usuario) {\n      return this.http.post(\"http://localhost:3000/login\", usuario);\n    }\n\n    setMunicipalidad(id) {\n      this.cookies.set(\"municipalidad\", id);\n    }\n\n    getMunicipalidad() {\n      return this.cookies.get(\"id\");\n    }\n\n    setToken(token) {\n      this.cookies.set(\"token\", token);\n    }\n\n    getToken() {\n      return this.cookies.get(\"token\");\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error.message);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n      } // return an observable with a user-facing error message\n\n\n      return throwError('Something bad happened; please try again later.');\n    }\n\n    getLogos() {\n      return this.http.get(this.base_path + '/logos.json').pipe(retry(2), catchError(this.handleError));\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}