{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { UserService } from 'src/app/api/user.service';\nimport { URL_TOKEN } from \"src/app/config/config\";\nimport { URL_SERVIDOR } from \"src/app/config/config\";\nimport { LoadingController } from '@ionic/angular';\nimport * as moment from 'moment';\nimport { Chart } from \"chart.js\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { DataResultado, IngresoMensualInterface } from \"src/app/interfaces/resultados\";\nimport { AlertController } from '@ionic/angular';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/api/user.service\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"../components/header/header.component\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nconst _c0 = [\"BarChartSemanal\"];\nconst _c1 = [\"BarChartSemestral\"];\nconst _c2 = [\"BarChartAnual\"];\nconst _c3 = [\"BarChartSeleccionMensual\"];\nconst _c4 = [\"BarChartEgresoMensual\"];\nconst _c5 = [\"BarChartEgresoSemanal\"];\n\nfunction Tab3Page_ion_card_header_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-card-header\");\n    i0.ɵɵelement(1, \"img\", 15);\n    i0.ɵɵelementStart(2, \"ion-card-title\", 16);\n    i0.ɵɵtext(3, \"GASTOS\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const logo_r9 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"src\", logo_r9.img, i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction Tab3Page_h4_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h4\");\n    i0.ɵɵtext(1, \"Por favor indique la fecha\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction Tab3Page_ion_spinner_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ion-spinner\", 17);\n  }\n}\n\nfunction Tab3Page_h4_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h4\");\n    i0.ɵɵtext(1, \"Por favor indique la fecha\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction Tab3Page_ion_spinner_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ion-spinner\", 17);\n  }\n}\n\nexport let Tab3Page = /*#__PURE__*/(() => {\n  class Tab3Page {\n    constructor(http, userService, loadingCtrl, alertController) {\n      this.http = http;\n      this.userService = userService;\n      this.loadingCtrl = loadingCtrl;\n      this.alertController = alertController;\n      this.isLoadingMensual = true;\n      this.isLoadingDiario = true;\n      this.customYearValues = [2020, 2019, 2018, 2017, 2016, 2015];\n      this.customMonthValues = [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"];\n      this.customDayShortNames = [\"lunes\", \"martes\", \"miercoles\", \"jueves\", \"viernes\"];\n    }\n\n    ngOnDestroy() {\n      this.createBarChartSemanal();\n      this.createBarChartSemestral();\n      this.createBarChartEgresoSemanal();\n      this.createBarChartSeleccionMensual();\n      this.createBarChartEgresoMensual();\n      this.getLogo();\n      this.var_ingresodelMes(Date).then(() => {});\n      this.var_semanal(event);\n      this.var_EgrsosdelMesCapital(Date);\n      this.var_EgresoSemanal();\n    }\n\n    doRefresh(event) {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log('Begin async operation');\n        this.getLogo();\n        this.var_ingresodelMes(Date).then(() => {});\n        this.var_semanal(event);\n        this.var_EgrsosdelMesCapital(Date);\n        this.var_EgresoSemanal();\n        setTimeout(() => {\n          console.log('Async operation has ended');\n          event.target.complete();\n        }, 2000);\n        const alert = yield this.alertController.create({\n          cssClass: 'my-custom-class',\n          header: 'Éxitos',\n          subHeader: '',\n          message: 'Los datos se recargaron con éxito.',\n          buttons: ['OK']\n        });\n        yield alert.present();\n      });\n    }\n\n    ionViewDidEnter() {\n      this.createBarChartSemanal();\n      this.createBarChartSemestral();\n      this.createBarChartEgresoSemanal();\n      this.createBarChartSeleccionMensual();\n      this.createBarChartEgresoMensual();\n    }\n\n    ionViewWillEnter() {\n      this.getLogo();\n      this.var_ingresodelMes(Date).then(() => {});\n      this.var_semanal(event);\n      this.var_EgrsosdelMesCapital(Date);\n      this.var_EgresoSemanal();\n    }\n\n    getLogo() {\n      // Get saved list of students\n      this.userService.getLogos().subscribe(response => {\n        this.logos = response;\n        console.log(response);\n      });\n    } //---------------------------------------------------------------------\n\n\n    var_ingresodelMes(date) {\n      return __awaiter(this, void 0, void 0, function* () {\n        var mi_fecha = moment(date).format(\"M\");\n        const my_url = URL_SERVIDOR + \"/gastos-corrientes-mensual/2020/\" + mi_fecha;\n        var token = URL_TOKEN;\n        const headers = {\n          \"content-type\": \"application/json\",\n          \"x-token\": token\n        };\n        this.http.get(my_url, {\n          headers: headers\n        }).subscribe(data => {\n          let apiDelImporteElegido = data.resultado.map(data => data.importe);\n          let apiDelLeyendaElegida = data.resultado.map(data => data.leyenda);\n          this.apiSeleccionMensualImporte = apiDelImporteElegido;\n          this.apiSeleccionMensualLeyenda = apiDelLeyendaElegida;\n          this.createBarChartSeleccionMensual();\n          this.isLoadingMensual = false;\n          console.log(apiDelImporteElegido);\n        });\n      });\n    }\n\n    var_semanal(event) {\n      const my_url = URL_SERVIDOR + \"/gastos-corrientes-semanal/2019/35\";\n      var token = URL_TOKEN;\n      const headers = {\n        \"content-type\": \"application/json\",\n        \"x-token\": token\n      };\n      this.http.get(my_url, {\n        headers: headers\n      }).subscribe(data => {\n        this.apiSemanal = data['resultado'].map(data => data.importe);\n        this.apiLeyendaSemanal = \"Total\";\n        this.createBarChartSemanal();\n        event.target.complete();\n        this.isLoadingMensual = false;\n      });\n    }\n\n    var_EgrsosdelMesCapital(date) {\n      return __awaiter(this, void 0, void 0, function* () {\n        var mi_fecha = moment(date).format(\"M\");\n        const my_url = URL_SERVIDOR + \"/gastos-capital-mensual/2020/\" + mi_fecha;\n        var token = URL_TOKEN;\n        const headers = {\n          \"content-type\": \"application/json\",\n          \"x-token\": token\n        };\n        this.http.get(my_url, {\n          headers: headers\n        }).subscribe(data => {\n          let apiDelImporteElegido = data.resultado.map(data => data.importe);\n          let apiDelLeyendaElegida = data.resultado.map(data => data.leyenda);\n          this.apiSeleccionMensualImporte = apiDelImporteElegido;\n          this.apiSeleccionMensualLeyenda = apiDelLeyendaElegida;\n          this.createBarChartEgresoMensual();\n          this.isLoadingMensual = false;\n        });\n      });\n    }\n\n    var_EgresoSemanal() {\n      const my_url = URL_SERVIDOR + \"/gastos-capital-semanal/2020/5\";\n      var token = URL_TOKEN;\n      const headers = {\n        \"content-type\": \"application/json\",\n        \"x-token\": token\n      };\n      this.http.get(my_url, {\n        headers: headers\n      }).subscribe(data => {\n        this.apiEgresoSemanal = data['resultado'].map(data => data.importe);\n        this.apiLeyendaEgresoSemanal = \"Total\";\n        this.isLoadingMensual = false;\n        this.createBarChartEgresoSemanal();\n      });\n    } //---------------------------------------------------------------------\n\n\n    createBarChartSemanal() {\n      const ctx = this.BarChartSemanal.nativeElement;\n      ctx.height = 400;\n      this.BarSemanal = new Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: this.customDayShortNames,\n          datasets: [{\n            label: this.apiLeyendaSemanal,\n            data: this.apiSemanal,\n            backgroundColor: ['rgba(255, 99, 133, 0.3)', 'rgba(54, 161, 235, 0.3)', 'rgba(252, 79, 48, 0.3)', 'rgba(5, 140, 107, 0.3)', 'rgba(74, 3, 82, 0.3)', 'rgba(38, 36, 36, 0.3)'],\n            borderColor: ['#ff6385', '#36a1eb', '#fc4f30', '#058c6b', '#4a0352', '#262424'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          scales: {\n            yAxes: [{\n              ticks: {\n                beginAtZero: true\n              }\n            }]\n          }\n        }\n      });\n    }\n\n    createBarChartEgresoSemanal() {\n      const ctx = this.BarChartEgresoSemanal.nativeElement;\n      ctx.height = 400;\n      this.BarEgresoSemanal = new Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: this.customDayShortNames,\n          datasets: [{\n            label: this.apiLeyendaEgresoSemanal,\n            data: this.apiEgresoSemanal,\n            backgroundColor: ['rgba(255, 99, 133, 0.3)', 'rgba(54, 161, 235, 0.3)', 'rgba(252, 79, 48, 0.3)', 'rgba(5, 140, 107, 0.3)', 'rgba(74, 3, 82, 0.3)', 'rgba(38, 36, 36, 0.3)'],\n            borderColor: ['#ff6385', '#36a1eb', '#fc4f30', '#058c6b', '#4a0352', '#262424'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          scales: {\n            yAxes: [{\n              ticks: {\n                beginAtZero: true\n              }\n            }]\n          }\n        }\n      });\n    }\n\n    createBarChartSeleccionMensual() {\n      const ctx = this.BarChartSeleccionMensual.nativeElement;\n      ctx.height = 400;\n      this.BarsSeleccionMensual = new Chart(ctx, {\n        type: \"doughnut\",\n        data: {\n          labels: this.apiSeleccionMensualLeyenda,\n          datasets: [{\n            label: \"# Miles de pesos\",\n            data: this.apiSeleccionMensualImporte,\n            backgroundColor: ['rgba(255, 99, 133, 0.3)', 'rgba(54, 161, 235, 0.3)', 'rgba(252, 79, 48, 0.3)', 'rgba(5, 140, 107, 0.3)', 'rgba(74, 3, 82, 0.3)', 'rgba(38, 36, 36, 0.3)'],\n            hoverBackgroundColor: ['#ff6385', '#36a1eb', '#fc4f30', '#058c6b', '#4a0352', '#262424']\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      });\n    }\n\n    createBarChartEgresoMensual() {\n      const ctx = this.BarChartEgresoMensual.nativeElement;\n      ctx.height = 400;\n      this.BarsEgresoMensual = new Chart(ctx, {\n        type: \"doughnut\",\n        data: {\n          labels: this.apiSeleccionMensualLeyenda,\n          datasets: [{\n            label: \"# Miles de pesos\",\n            data: this.apiSeleccionMensualImporte,\n            backgroundColor: ['rgba(255, 99, 133, 0.3)', 'rgba(54, 161, 235, 0.3)', 'rgba(252, 79, 48, 0.3)', 'rgba(5, 140, 107, 0.3)', 'rgba(74, 3, 82, 0.3)', 'rgba(38, 36, 36, 0.3)'],\n            hoverBackgroundColor: ['#ff6385', '#36a1eb', '#fc4f30', '#058c6b', '#4a0352', '#262424']\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      });\n    }\n\n    createBarChartSemestral() {\n      let ctx = this.BarChartSemestral.nativeElement;\n      ctx.height = 400;\n      this.BarsSemestral = new Chart(ctx, {\n        type: \"line\",\n        data: {\n          labels: this.apiSemestral && this.apiSemestral.labels,\n          datasets: [{\n            data: this.apiEgresoMensual,\n            label: \"Egreso Municipal Mensual\",\n            fill: false,\n            lineTension: 0.1,\n            backgroundColor: \"rgba(54, 161, 235,0.4)\",\n            borderColor: \"rgba(54, 161, 235,1)\",\n            borderCapStyle: \"butt\",\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: \"miter\",\n            pointBorderColor: \"rgba(54, 161, 235,1)\",\n            pointBackgroundColor: \"#fff\",\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"rgba(54, 161, 235,1)\",\n            pointHoverBorderColor: \"rgba(74, 3, 82,1)\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            spanGaps: false\n          }]\n        }\n      });\n    }\n\n  }\n\n  Tab3Page.ɵfac = function Tab3Page_Factory(t) {\n    return new (t || Tab3Page)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.LoadingController), i0.ɵɵdirectiveInject(i3.AlertController));\n  };\n\n  Tab3Page.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: Tab3Page,\n    selectors: [[\"app-tab3\"]],\n    viewQuery: function Tab3Page_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n        i0.ɵɵviewQuery(_c4, 5);\n        i0.ɵɵviewQuery(_c5, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.BarChartSemanal = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.BarChartSemestral = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.BarChartAnual = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.BarChartSeleccionMensual = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.BarChartEgresoMensual = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.BarChartEgresoSemanal = _t.first);\n      }\n    },\n    decls: 53,\n    vars: 9,\n    consts: [[\"slot\", \"fixed\", 3, \"ionRefresh\"], [\"pullingIcon\", \"chevron-down-circle-outline\", \"pullingText\", \"Haz pull para recargar\", \"refreshingSpinner\", \"lines\", \"refreshingText\", \"Refrescando resultados...\"], [\"mode\", \"ios\", \"color\", \"secondary\"], [4, \"ngFor\", \"ngForOf\"], [1, \"ion-padding\"], [\"mode\", \"ios\"], [1, \"titulo-cards\"], [\"value\", \"2020-01-01\", \"min\", \"2019\", \"max\", \"2021\", \"displayFormat\", \"MM/YYYY\", 3, \"dayShortNames\", \"ngModel\", \"ngModelChange\", \"ionChange\"], [1, \"loading\"], [4, \"ngIf\"], [\"class\", \"loading\", \"name\", \"lines\", \"placeholder\", \"Indique la fecha\", 4, \"ngIf\"], [\"BarChartSeleccionMensual\", \"\"], [\"BarChartSemanal\", \"\"], [\"BarChartEgresoMensual\", \"\"], [\"BarChartEgresoSemanal\", \"\"], [3, \"src\"], [1, \"titulo\"], [\"name\", \"lines\", \"placeholder\", \"Indique la fecha\", 1, \"loading\"]],\n    template: function Tab3Page_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-header\");\n        i0.ɵɵelementStart(1, \"ion-content\");\n        i0.ɵɵelementStart(2, \"ion-refresher\", 0);\n        i0.ɵɵlistener(\"ionRefresh\", function Tab3Page_Template_ion_refresher_ionRefresh_2_listener($event) {\n          return ctx.doRefresh($event);\n        });\n        i0.ɵɵelement(3, \"ion-refresher-content\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-card\", 2);\n        i0.ɵɵtemplate(5, Tab3Page_ion_card_header_5_Template, 4, 1, \"ion-card-header\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵelementStart(7, \"ion-card\", 5);\n        i0.ɵɵelementStart(8, \"ion-card-header\");\n        i0.ɵɵelementStart(9, \"h5\", 6);\n        i0.ɵɵtext(10, \"Egreso Mensual\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"ion-item\");\n        i0.ɵɵelementStart(12, \"ion-label\");\n        i0.ɵɵtext(13, \"Seleccionar el mes\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"ion-datetime\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function Tab3Page_Template_ion_datetime_ngModelChange_14_listener($event) {\n          return ctx.mydate = $event;\n        })(\"ionChange\", function Tab3Page_Template_ion_datetime_ionChange_14_listener() {\n          return ctx.var_ingresodelMes(ctx.mydate);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"ion-card-content\");\n        i0.ɵɵelementStart(16, \"div\");\n        i0.ɵɵelementStart(17, \"div\", 8);\n        i0.ɵɵtemplate(18, Tab3Page_h4_18_Template, 2, 0, \"h4\", 9);\n        i0.ɵɵtemplate(19, Tab3Page_ion_spinner_19_Template, 1, 0, \"ion-spinner\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\");\n        i0.ɵɵelement(21, \"canvas\", null, 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"ion-card\", 5);\n        i0.ɵɵelementStart(24, \"ion-card-header\");\n        i0.ɵɵelementStart(25, \"h5\", 6);\n        i0.ɵɵtext(26, \"Egreso Semanal\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"ion-card-content\");\n        i0.ɵɵelement(28, \"canvas\", null, 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"ion-card\", 5);\n        i0.ɵɵelementStart(31, \"ion-card-header\");\n        i0.ɵɵelementStart(32, \"h5\", 6);\n        i0.ɵɵtext(33, \"Egreso Mensual Capital\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"ion-item\");\n        i0.ɵɵelementStart(35, \"ion-label\");\n        i0.ɵɵtext(36, \"Seleccionar el mes\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"ion-datetime\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function Tab3Page_Template_ion_datetime_ngModelChange_37_listener($event) {\n          return ctx.mydateEgreso = $event;\n        })(\"ionChange\", function Tab3Page_Template_ion_datetime_ionChange_37_listener() {\n          return ctx.var_EgrsosdelMesCapital(ctx.mydateEgreso);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"ion-card-content\");\n        i0.ɵɵelementStart(39, \"div\");\n        i0.ɵɵelementStart(40, \"div\", 8);\n        i0.ɵɵtemplate(41, Tab3Page_h4_41_Template, 2, 0, \"h4\", 9);\n        i0.ɵɵtemplate(42, Tab3Page_ion_spinner_42_Template, 1, 0, \"ion-spinner\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(43, \"div\");\n        i0.ɵɵelement(44, \"canvas\", null, 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(46, \"ion-card\", 5);\n        i0.ɵɵelementStart(47, \"ion-card-header\");\n        i0.ɵɵelementStart(48, \"h5\", 6);\n        i0.ɵɵtext(49, \"Egreso Semanal Por Capital\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(50, \"ion-card-content\");\n        i0.ɵɵelement(51, \"canvas\", null, 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.logos);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"dayShortNames\", ctx.customDayShortNames)(\"ngModel\", ctx.mydate);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoadingMensual);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoadingMensual);\n        i0.ɵɵadvance(18);\n        i0.ɵɵproperty(\"dayShortNames\", ctx.customDayShortNames)(\"ngModel\", ctx.mydateEgreso);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoadingMensual);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoadingMensual);\n      }\n    },\n    directives: [i4.HeaderComponent, i3.IonContent, i3.IonRefresher, i3.IonRefresherContent, i3.IonCard, i5.NgForOf, i3.IonCardHeader, i3.IonCardTitle, i3.IonItem, i3.IonLabel, i3.IonDatetime, i3.SelectValueAccessor, i6.NgControlStatus, i6.NgModel, i3.IonCardContent, i5.NgIf, i3.IonSpinner],\n    styles: [\".titulo[_ngcontent-%COMP%]{text-align:center}.loading[_ngcontent-%COMP%]{text-align:center;color:#d8d8d8}\"]\n  });\n  return Tab3Page;\n})();","map":null,"metadata":{},"sourceType":"module"}